}
fisher_method(pp_values)
plot_df <- data.frame(p_values) %>%
mutate(bin = round(p_values + .005, 2)) %>%                # round up to nearest decimal
group_by(bin) %>%
count(bin) %>%
mutate(percentages = n/length(p_values))
ggplot(aes(bin, percentages), data = plot_df) +
geom_point() +
geom_line() +
xlab("p-values") +
ylab("Percentage of p-values")
library(tidyverse)
p_values <- c (.001, .043, .035, .006,             # Swallow & Jiang, 2010
.004, .003, .017, .035)             # Swallow & Jiang, 2014
binom.test(sum(p_values <= .025), length(p_values), .5) # number of "successes" = number of p-values <= .025
pp_values <- p_values/.05
pp_values
fisher_method <- function(pp_values){
pp_aggregate <- sum(-2 * log(pp_values))
out <- 1 - pchisq(pp_aggregate, df = length(pp_values) * 2)      # get p of chi square test
print(out)
}
fisher_method(pp_values)
plot_df <- data.frame(p_values) %>%
mutate(bin = round(p_values + .005, 2)) %>%                # round up to nearest decimal
group_by(bin) %>%
count(bin) %>%
mutate(percentages = n/length(p_values))
ggplot(aes(bin, percentages), data = plot_df) +
geom_point() +
geom_line() +
xlab("p-values") +
ylab("Percentage of p-values")
rm(list=ls())
rm(list=ls())
rnorm(20)
rnorm(20, 0.5)
t.test(rnorm(20), rnorm(20, 0.5))
replicate(100, t.test(rnorm(20), rnorm(20, 0.5))$p.value)
a <- replicate(100, t.test(rnorm(20), rnorm(20, 0.5))$p.value)
sum(a<.05)
sum(a<.05)
a <- replicate(100, t.test(rnorm(20), rnorm(20, 0.5))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(20), rnorm(20, 0.8))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(20), rnorm(20, 0.8))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(20), rnorm(20, 0.8))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(64), rnorm(64, 0.5))$p.value)
sum(a<.05)
b <- (rnorm(32, 0.5), rnorm(32, -0.5))
b <- c(rnorm(32, 0.5), rnorm(32, -0.5))
a <- replicate(100, t.test(rnorm(64), b)$p.value)
sum(a<.05)
b <- c(rnorm(14, 0.5), rnorm(50, -0.5))
a <- replicate(100, t.test(rnorm(64), b)$p.value)
sum(a<.05)
b <- c(rnorm(14, 0), rnorm(50, -0.5))
a <- replicate(100, t.test(rnorm(64), b)$p.value)
sum(a<.05)
b <- c(rnorm(14, 0), rnorm(50, -0.5))
a <- replicate(100, t.test(rnorm(64), b)$p.value)
sum(a<.05)
b <- c(rnorm(14, 0), rnorm(50, -0.5))
a <- replicate(100, t.test(rnorm(64), b)$p.value)
sum(a<.05)
b <- c(rnorm(14, 0), rnorm(50, -0.5))
a <- replicate(100, t.test(rnorm(64), b)$p.value)
sum(a<.05)
b <- c(rnorm(14, 0), rnorm(50, -0.5))
a <- replicate(100, t.test(rnorm(64), b)$p.value)
sum(a<.05)
b <-
a <- replicate(100, t.test(rnorm(64), c(rnorm(14, 0), rnorm(50, -0.5)))$p.value)
sum(a<.05)
b <-
a <- replicate(100, t.test(rnorm(64), c(rnorm(14, 0), rnorm(50, -0.5)))$p.value)
sum(a<.05)
b <-
a <- replicate(100, t.test(rnorm(64), c(rnorm(14, 0), rnorm(50, -0.5)))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(64), c(rnorm(14, 0), rnorm(50, -0.5)))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(64), c(rnorm(14, 0), rnorm(50, -0.5)))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(64), c(rnorm(14, 0), rnorm(50, -0.5)))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(64), c(rnorm(20, 0), rnorm(44, -0.5)))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(64), c(rnorm(20, 0), rnorm(44, -0.5)))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(64), c(rnorm(20, 0), rnorm(44, -0.5)))$p.value)
sum(a<.05)
a <- replicate(100, t.test(rnorm(64), c(rnorm(32, 0), rnorm(32, -0.5)))$p.value)
sum(a<.05)
sum(a<.05) / length(a)
a <- replicate(100, t.test(rnorm(64), c(rnorm(32, 0), rnorm(32, -0.5)))$p.value)
sum(a<.05) / length(a)
library(BayesFactor)
anovaBF(rnorm(64) ~ rnorm(64))
df <- data.frame(a = rnorm(64), b=rnorm(64))
View(df)
anovaBF(a ~ b, df)
ttestBF(a ~ b, df)
ttestBF(df$a - df$b)
ttestBF(rnorm(64) - rnorm(64))
ttestBF(rnorm(64) - rnorm(64))
df <- data.frame(a = rnorm(64), b=rnorm(64))
ttestBF(rnorm(64) - rnorm(64))
ttestBF(rnorm(64) - rnorm(64))[1]
c<- ttestBF(rnorm(64) - rnorm(64))
c<- replicate(100, ttestBF(rnorm(64) - rnorm(64)))
c
c<.01
View(c)
c<-  ttestBF(rnorm(64) - rnorm(64))$bayesfactor
c<-  ttestBF(rnorm(64) - rnorm(64))[[1]]
c<-  as.matrix(ttestBF(rnorm(64) - rnorm(64)))
View(c)
plot(c)
a <- replicate(100, t.test(rnorm(64), c(rnorm(32, 0), rnorm(32, -0.5)))$p.value)
sum(a<.05) / length(a)
a <- replicate(100, t.test(rnorm(64), c(rnorm(50, 0), rnorm(14, -0.5)))$p.value)
sum(a<.05) / length(a)
a <- replicate(100, t.test(rnorm(64), c(rnorm(40, 0), rnorm(24, -0.5)))$p.value)
sum(a<.05) / length(a)
b <- replicate(100, t.test(rnorm(40), rnorm(24, -0.5))$p.value)
b <- replicate(100, t.test(rnorm(40), rnorm(24, -0.5))$p.value)
sum(b<.05)/length(b)
a <- replicate(100, t.test(rnorm(64), c(rnorm(40, 0), rnorm(24, -0.5)))$p.value)
sum(a<.05) / length(a)
a <- replicate(100, t.test(rnorm(64), c(rnorm(40, 0), rnorm(24, -0.5)))$p.value)
sum(a<.05) / length(a)
a <- replicate(100, t.test(rnorm(64), c(rnorm(34, 0), rnorm(30, -0.5)))$p.value)
sum(a<.05) / length(a)
sample.int(100,10)
a <- replicate(1000, rnorm(11.36, 2.82))
a
View(a)
a <- replicate(1000, max(rnorm(11.36, 2.82)))
a <- replicate(1000, min(rnorm(11.36, 2.82)))
df <- replicate(10000, rnorm(11.36, 2.82))
df <- replicate(10000, rnorm(11.36, 2.82))
a<- lapply(df, max)
a<- lapply(df, max())
b <- lapply(df, min)
a
View(df)
df <- replicate(10, rnorm(11.36, 2.82))
View(df)
a<- lapply(df, max)
b <- lapply(df, min)
View(a)
View(df)
a<- sapply(df, max)
a<- apply(df, max)
a<- lapply(df, max)
df <- replicate(10, rnorm(11.36, 2.82))
mini = c(mini, min(df[i]))
for (i = 1:nrow(df)){
maxi = c(maxi, max(df[i]))
mini = c(mini, min(df[i]))
}
maxi <- ()
mini <- ()
maxi <- list()
mini <- list()
for (i = 1:nrow(df)){
maxi = c(maxi, max(df[i]))
mini = c(mini, min(df[i]))
}
for (i in 1:nrow(df)){
maxi = c(maxi, max(df[i]))
mini = c(mini, min(df[i]))
}
maxi
View(df)
df
df[1]
df[1,]
maxi <- list()
mini <- list()
for (i in 1:nrow(df)){
maxi = c(maxi, max(df[i,]))
mini = c(mini, min(df[i,]))
}
df <- replicate(10000, rnorm(11.36, 2.82))
maxi <- list()
mini <- list()
for (i in 1:nrow(df)){
maxi = c(maxi, max(df[i,]))
mini = c(mini, min(df[i,]))
}
sd(maxi)
maxi <- list()
mini <- list()
for (i in 1:nrow(df)){
maxi = c(maxi, max(df[i,]))
mini = c(mini, min(df[i,]))
}
df <- replicate(1000, rnorm(11.36, 2.82))
maxi <- list()
mini <- list()
for (i in 1:nrow(df)){
maxi = c(maxi, max(df[i,]))
mini = c(mini, min(df[i,]))
}
View(mini)
View(maxi)
nrow(df)
length(df)
for (i in 1:length(df)){
maxi = c(maxi, max(df[i,]))
mini = c(mini, min(df[i,]))
}
maxi <- list()
mini <- list()
for (i in 1:length(df)){
maxi = c(maxi, max(df[,i]))
mini = c(mini, min(df[,i]))
}
rnorm(11.36, 2.82)
rnorm(11.36, 2.82, 1)
df <- replicate(100, rnorm(1, 11.36, 2.82))
maxi <- list()
mini <- list()
for (i in 1:length(df)){
maxi = c(maxi, max(df[,i]))
mini = c(mini, min(df[,i]))
}
maxi <- list()
mini <- list()
for (i in 1:nrow(df)){
maxi = c(maxi, max(df[i,]))
mini = c(mini, min(df[i,]))
}
maxi = c(maxi, max(df[i,]))
df[1]
df[1,]
df[,1]
df <- replicate(100, rnorm(20, 11.36, 2.82))
maxi <- list()
mini <- list()
for (i in 1:nrow(df)){
maxi = c(maxi, max(df[i,]))
mini = c(mini, min(df[i,]))
}
sd(maxi)
View(maxi)
View(mini)
View(df)
View(maxi)
df <- replicate(1000, rnorm(20, 11.36, 2.82))
mini <- list()
maxi <_ list()
for (i = 1:nrow(df)){
mini <- c(mini, min(df[i,]))
maxi <- c(maxi, max(df[i,]))
}
mini <- list()
maxi <- list()
for (i = 1:nrow(df)){
mini <- c(mini, min(df[i,]))
maxi <- c(maxi, max(df[i,]))
}
for (i in 1:nrow(df)){
mini <- c(mini, min(df[i,]))
maxi <- c(maxi, max(df[i,]))
}
mini <- list()
maxi <- list()
for (i in 1:nrow(df)){
mini <- c(mini, min(df[i,]))
maxi <- c(maxi, max(df[i,]))
}
sd(mini)
sd(as.numeric(mini))
sd(as.numeric(max))
sd(as.numeric(maxi))
quant_75 <- quantile(mini)
quant_75 <- quantile(as.numeric(mini))
quant_75 <- quantile(as.numeric(mini))[4]
mini <- list()
maxi <- list()
mini_quant <- list()
maxi_quant <- list()
for (i in 1:nrow(df)){
mini <- c(mini, min(df[i,]))
maxi <- c(maxi, max(df[i,]))
mini_quant <- c(mini_quant, quantile(as.numeric(mini))[4])
maxi_quant <- c(maxi_quant, quantile(as.numeric(maxi))[4])
}
sd(as.numeric(mini))
sd(as.numeric(maxi))
df <- replicate(1000, rnorm(20, 40, 25))
mini <- list()
maxi <- list()
mini_quant <- list()
maxi_quant <- list()
for (i in 1:nrow(df)){
mini <- c(mini, min(df[i,]))
maxi <- c(maxi, max(df[i,]))
mini_quant <- c(mini_quant, quantile(as.numeric(mini))[4])
maxi_quant <- c(maxi_quant, quantile(as.numeric(maxi))[4])
}
sd(as.numeric(mini))
sd(as.numeric(maxi))
setwd('Z:/Contextual_Cueing/Experiment 3/Data')
library(tidyverse)
library(ez)
library(BayesFactor)
every_nth <- function(x, nth, empty = TRUE, inverse = FALSE)
{
if (!inverse) {
if(empty) {
x[1:nth == 1] <- ""
x
} else {
x[1:nth != 1]
}
} else {
if(empty) {
x[1:nth != 1] <- ""
x
} else {
x[1:nth == 1]
}
}
}
library(broom)
all_files = list.files(pattern=".csv")
recognition_files = list.files(pattern="recognition.csv")
search_files = setdiff(all_files, c(recognition_files, "question2_resp.csv"))
recognition_data <- do.call(rbind, lapply(recognition_files, read.csv, header = TRUE))
search_data <- do.call(rbind, lapply(search_files, read.csv, header=TRUE))
q2_data <- read.csv("question2_resp.csv") %>%
rename(sub_id_2 = "Var1",
q2_resp = "Var2")
descrip <- search_data %>%
filter(sub_id != 28) %>%
mutate(hit = ifelse(Error == 0, 1, 0)) %>%
group_by(sub_id) %>%
summarise(accuracy = mean(hit))
individual_mean_rts <- search_data %>%
filter(sub_id != 28) %>%
filter(Error == 0) %>%
group_by(sub_id) %>%
summarise(meanRT = mean(RT))
group_sd <- sd(individual_mean_rts$meanRT)
group_mean <- mean(individual_mean_rts$meanRT)
bad_subs_accuracy <- (descrip %>%
filter(accuracy<.9))$sub_id
bad_subs_rt <- (individual_mean_rts %>%
mutate(upper_sd = group_mean + (2*group_sd),
lower_sd = group_mean - (2*group_sd)) %>%
mutate(exclude = if_else(meanRT < lower_sd | meanRT > upper_sd, 1, 0)) %>%
filter(exclude == 1))$sub_id
## again, with subject 19 excluded
descrip <- search_data %>%
filter(sub_id != bad_subs_rt) %>%
mutate(hit = ifelse(Error == 0, 1, 0)) %>%
group_by(sub_id) %>%
summarise(accuracy = mean(hit))
individual_mean_rts <- search_data %>%
filter(sub_id != bad_subs_rt) %>%
filter(Error == 0) %>%
group_by(sub_id) %>%
summarise(meanRT = mean(RT))
group_sd <- sd(individual_mean_rts$meanRT)
group_mean <- mean(individual_mean_rts$meanRT)
bad_subs_rt <- (individual_mean_rts %>%
mutate(upper_sd = group_mean + (2*group_sd),
lower_sd = group_mean - (2*group_sd)) %>%
mutate(exclude = if_else(meanRT < lower_sd | meanRT > upper_sd, 1, 0)) %>%
filter(exclude == 1))$sub_id
bad_subs <- 19
n_subs <- 20
clean_data <- search_data %>%
filter(!is.element(sub_id, bad_subs)) %>%
filter(Error == 0) %>%
group_by(repeat., d_setsize, sub_id) %>%
mutate(upperlimit = mean(RT) + 2.5*sd(RT), lowerlimit = mean(RT) - 2.5*sd(RT)) %>%
mutate(outlier = RT > upperlimit | RT < lowerlimit) %>%
mutate(display = if_else(repeat. == 0, 'new', 'old')) %>%
filter(outlier == FALSE) %>%
mutate(epoch = ceiling(block/5))
clean_df <- clean_data %>%
group_by(display, d_setsize, epoch, sub_id) %>%
summarise(rt = mean(RT))
clean_df$display <- as.factor(clean_df$display)
clean_df$epoch <- as.factor(clean_df$epoch)
plot_df <- clean_df %>%
group_by(display, d_setsize) %>%
summarise(mean_rt = mean(rt), sem = sd(rt/sqrt(20)))
clean_df$epoch <- as.factor(clean_df$epoch)
clean_df$d_setsize <- as.factor(clean_df$d_setsize)
ezANOVA(clean_df,
dv = rt,
wid = sub_id,
within = c(epoch, d_setsize, display))
descriptive_stats <- clean_df %>%
group_by(epoch) %>%
summarise(meanRT = mean(rt),
SD = sd(rt))
t.test((clean_df %>% filter(d_setsize == 3 & (epoch == 4 | epoch == 5) & display=='new'))$rt ,
(clean_df %>% filter(d_setsize == 3 & (epoch == 4 | epoch == 5) & display == 'old'))$rt, paired=TRUE)
t.test((clean_df %>% filter(d_setsize == 31  & display=='new'))$rt ,
(clean_df %>% filter(d_setsize == 31 & display == 'old'))$rt, paired=TRUE)
t.test((recognition_df %>%  filter(repeat. == 1 & d_setsize == 31))$accuracy, mu =.5)
recognition_df <- merge(recognition_data, q2_data) %>%
# filter(block == 1) %>%
group_by(tloc, sub_id_2, repeat., d_setsize) %>%
filter(sub_id_2 != 19 & sub_id_2 != 24) %>%
summarise(q1 = mean(q1),
noticed = mean(q2_resp),
accuracy = mean(Hit_recog),
percentage = mean(q2),
conf = mean(Confidence_recog))
t.test((recognition_df %>%  filter(repeat. == 1 & d_setsize == 31))$accuracy, mu =.5)
t.test((recognition_df %>%  filter(repeat. == 1 & d_setsize == 0))$accuracy, mu =.5)
t.test((recognition_df %>%  filter(repeat. == 1 & d_setsize == 19))$accuracy, mu = .5)
recognition_dprime<- recognition_data %>%
filter(sub_id_2 != 19 & sub_id_2 != 24) %>%
mutate(hit_count = if_else(repeat. == 1 & Resp_recog ==1, 1, 0),
fa_count = if_else(repeat. == 0 & Resp_recog == 1, 1, 0),
cr_count = if_else( repeat. == 0 & Resp_recog == 0, 1, 0),
miss_count = if_else(repeat. == 1 & Resp_recog == 0, 1, 0)) %>%
group_by(sub_id_2, d_setsize) %>%
summarise(hit = mean(hit_count),
fa = mean(fa_count),
cr = mean(cr_count),
miss = mean(miss_count)) %>%
mutate(hit = if_else(hit == 0, 1/24, if_else(hit == 1, 1 - (1/24), hit)),
fa = if_else(fa == 0, 1/24, if_else(fa == 1, 1 - (1/24), fa)),
cr = if_else(cr == 0, 1/24, if_else(cr == 1, 1 - (1/24), cr)),
miss = if_else(miss == 0, 1/24, if_else(miss == 1, 1 - (1/24), miss))) %>%
mutate(dprime = mapply(func, list(hit), list(fa)))
func <- function(x, y){
return(qnorm(x) - qnorm(y))
}
recognition_dprime<- recognition_data %>%
filter(sub_id_2 != 19 & sub_id_2 != 24) %>%
mutate(hit_count = if_else(repeat. == 1 & Resp_recog ==1, 1, 0),
fa_count = if_else(repeat. == 0 & Resp_recog == 1, 1, 0),
cr_count = if_else( repeat. == 0 & Resp_recog == 0, 1, 0),
miss_count = if_else(repeat. == 1 & Resp_recog == 0, 1, 0)) %>%
group_by(sub_id_2, d_setsize) %>%
summarise(hit = mean(hit_count),
fa = mean(fa_count),
cr = mean(cr_count),
miss = mean(miss_count)) %>%
mutate(hit = if_else(hit == 0, 1/24, if_else(hit == 1, 1 - (1/24), hit)),
fa = if_else(fa == 0, 1/24, if_else(fa == 1, 1 - (1/24), fa)),
cr = if_else(cr == 0, 1/24, if_else(cr == 1, 1 - (1/24), cr)),
miss = if_else(miss == 0, 1/24, if_else(miss == 1, 1 - (1/24), miss))) %>%
mutate(dprime = mapply(func, list(hit), list(fa)))
t.test((recognition_dprime %>%  filter(d_setsize == 0))$dprime, mu =0)
t.test((recognition_dprime %>%  filter(d_setsize == 31))$dprime, mu =0)
View(recognition_df)
noticing <- merge(recognition_data, q2_data) %>%
filter(sub_id_2 != 19, sub_id_2!= 24) %>%
group_by(sub_id_2) %>%
summarize(noticed = mean(q1),
percentage = mean(q2_resp, na.rm=TRUE)) %>%
summarize(noticed = mean(noticed),
percentage = mean(percentage))
perfect <- recognition_df %>% filter(accuracy == 1) %>%
filter(d_setsize != 0)
individual_novel_rts <- clean_data %>%
group_by(display, d_setsize, sub_id) %>%
summarise(new_rt = mean(RT)) %>%
filter(sub_id != 24) %>%
filter(display == "new")
individual_repeated_rts <- clean_data %>%
filter(sub_id!= 19 & sub_id != 24) %>%
group_by(sub_id, display, tloc, d_setsize) %>%
summarise(repeat_rt = mean(RT)) %>%
filter(display == "old")
individual_cc <- merge(individual_novel_rts, individual_repeated_rts, by=c("sub_id", "d_setsize")) %>%
mutate(cc = (repeat_rt - new_rt))
individual_display_recognition <- merge(recognition_data, q2_data) %>%
filter(sub_id_2 != 19 & sub_id_2 != 24) %>%
filter(d_setsize != 0) %>%
# 19 bad subject, 24 didn't complete recognition test
group_by(sub_id_2, repeat., tloc, d_setsize) %>%
summarise(accuracy = mean(Hit_recog), conf = mean(Confidence_recog)) %>%
filter(repeat. == 1) %>%
rename(sub_id = "sub_id_2")
individual_display_recognition <- merge(recognition_data, q2_data) %>%
filter(sub_id_2 != 19 & sub_id_2 != 24) %>%
filter(d_setsize != 0) %>%
# 19 bad subject, 24 didn't complete recognition test
group_by(sub_id_2, repeat., tloc, d_setsize) %>%
summarise(accuracy = mean(Hit_recog), conf = mean(Confidence_recog)) %>%
filter(repeat. == 1) %>%
rename(sub_id = "sub_id_2") %>%
filter(accuracy == 1)
individual_display_recognition <- merge(recognition_data, q2_data) %>%
filter(sub_id_2 != 19 & sub_id_2 != 24) %>%
filter(d_setsize != 0) %>%
# 19 bad subject, 24 didn't complete recognition test
group_by(sub_id_2, repeat., tloc, d_setsize) %>%
summarise(accuracy = mean(Hit_recog), conf = mean(Confidence_recog)) %>%
filter(repeat. == 1) %>%
rename(sub_id = "sub_id_2") %>%
filter(accuracy == 1) %>%
group_by(sub_id) %>%
count(sub_id)
View(individual_display_recognition)
